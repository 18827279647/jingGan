//
//  IntegralNewHomeController.m
//  jingGang
//
//  Created by 张康健 on 15/11/23.
//  Copyright © 2015年 yi jiehuang. All rights reserved.
//

#import "IntegralNewHomeController.h"
#import "JGIntegralShopTableViewCell.h"
#import "RecommentCodeDefine.h"
#import "MJRefresh.h"
#import "MJExtension.h"
#import "MJRefresh.h"
#import "JGIntegralShopHeaderView.h"
#import "JGNearCommendView.h"
#import "JGIntergralScopeSelectView.h"
#import "IntegralShopCell.h"
#import "JGIntegralCommendGoodsModel.h"

@interface IntegralNewHomeController ()<UITableViewDelegate,UITableViewDataSource,UICollectionViewDelegate,UICollectionViewDataSource,UICollectionViewDelegateFlowLayout,JGIntergralScopeSelectViewDelegate>

@property (nonatomic,strong) UITableView *tableView;

@property (nonatomic,strong) UICollectionView *collectionView;
/**
 *  推荐积分商品数组
 */
@property (nonatomic,strong) NSMutableArray *arrayCommendGoods;
/**
 *  最小积分范围
 */
@property (nonatomic,assign) NSString *strMinIntegral;
/**
 *  最大积分范围
 */
@property (nonatomic,assign) NSString *strMaxIntegral;
/**
 *  是否请求全部积分范围
 */
@property (nonatomic,strong) NSNumber *isFindAll;
/**
 *  页数
 */
@property (nonatomic,assign) NSInteger pageNum;
/**
 *  积分商品列表
 */
@property (nonatomic,strong) NSMutableArray *arrayIntegralGoodsList;
/**
 *  底部View
 */
@property (nonatomic,strong) UIView *viewTabelFoot;
/**
 *  底部View的初始高度
 */
@property (nonatomic,assign) CGFloat viewTabelFootHeight;
/**
 *  tableView初始ContenSize
 */
@property (nonatomic,assign) CGSize  tableViewContenSize;

@end

@implementation IntegralNewHomeController

- (void)viewDidLoad {
    [super viewDidLoad];
    
    [self _init];
    [MBProgressHUD showHUDAddedTo:self.view animated:YES];
    [self request];
    //请求积分兑换列表
//    [self _requestMyIntegralExchangeList];
}


- (void)_init {
    self.navigationItem.title = @"积分商城";
    
    [self.view addSubview:self.tableView];
    self.navigationItem.rightBarButtonItem = nil;
}

#pragma mark - private
- (void)request{
    //积分商品列表
    self.isFindAll = @1;
    self.pageNum = 1;
    [self requestMyIntegralExchangeListWithPageNum:self.pageNum isNeedRemoveObj:YES];
}

#pragma mark ---UICollectionViewDataSource
- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section
{
    return self.arrayIntegralGoodsList.count;
}
/**
 *  设置单元格间的横向间距
 */
- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath
{
    IntegralShopCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:ID forIndexPath:indexPath];
    
    JGIntegralCommendGoodsModel *model = self.arrayIntegralGoodsList[indexPath.item];
    cell.model = model;
    
    return cell;
}

#pragma mark -- UICollectionViewDelegateFlowLayout
- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath{
    
    /**
     *  320为5s宽度，以5s宽度为准算的宽高比例。156是宽，224是高
     */
    CGFloat scaleWidth = 320.0 / 156.0;
    CGFloat scaleHeight = 320.0 / 224.0;
    return CGSizeMake(kScreenWidth / scaleWidth, kScreenWidth / scaleHeight);
}
- (CGFloat)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout*)collectionViewLayout minimumInteritemSpacingForSectionAtIndex:(NSInteger)section
{
//    CGFloat scale = 320.0 / 8.0;
//    return kScreenWidth / scale;
    return 0;
}
/**
 *  通过调整inset使单元格顶部和底部都有间距(inset次序: 上，左，下，右边)
 */
- (UIEdgeInsets)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout*)collectionViewLayout insetForSectionAtIndex:(NSInteger)section {
    
    
    CGFloat leftScale = 320.0 / 2.0;
    CGFloat ritghtScale = 320.0 / 2.0;
    return UIEdgeInsetsMake(0, kScreenWidth / leftScale, 0, kScreenWidth/ritghtScale);

}
/**
 *  设置纵向的行间距
 */
- (CGFloat) collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout minimumLineSpacingForSectionAtIndex:(NSInteger)section
{
    CGFloat scale = 320.0 / 4.0;
    return kScreenWidth / scale;
//    return 4.0f;
}

#pragma mark  --UICollectionViewDelegate
- (void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath
{
    JGLog(@"%ld",indexPath.item);
}



#pragma mark --- UITableViewDataSource
- (NSInteger) numberOfSectionsInTableView:(UITableView *)tableView
{
    return 1;
}
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    
    return 4;
    
}
- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{

    static NSString *identifile = @"cell";
    JGIntegralShopTableViewCell *cell = (JGIntegralShopTableViewCell *)[tableView dequeueReusableCellWithIdentifier:identifile];
        
    if (!cell) {
        NSArray *nib = [[NSBundle mainBundle] loadNibNamed:@"JGIntegralShopTableViewCell" owner:self options:nil];
        cell = [nib lastObject];
    }

    
        
    return cell;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    //跳转商户详情

}


#pragma mark - 请求积分商品列表

-(void)requestMyIntegralExchangeListWithPageNum:(NSInteger)pageNum isNeedRemoveObj:(BOOL)isNeedRemoveObj{
    
    
    WEAK_SELF
    IntegralListByCriteriaRequest *request = [[IntegralListByCriteriaRequest alloc] init:GetToken];
    request.api_findAll = self.isFindAll;
    request.api_minIntegral = self.strMinIntegral;
    request.api_maxIntegral = self.strMaxIntegral;
    request.api_pageSize = @10;
    request.api_pageNum = [NSNumber numberWithInteger:pageNum];
    [self.vapiManager integralListByCriteria:request success:^(AFHTTPRequestOperation *operation, IntegralListByCriteriaResponse *response) {
        
        NSArray *arrayList = [response.integralList copy];
        
        [weak_self disposeIntegralgoodsListWithArray:arrayList isNeedRemoveObj:isNeedRemoveObj];
        
    } failure:^(AFHTTPRequestOperation *operation, NSError *error) {
        
    }];

}
#pragma mark - private
/**
 *  处理网络接受到的好店推荐详情数据
 */
- (void)disposeIntegralgoodsListWithArray:(NSArray *)array isNeedRemoveObj:(BOOL)isNeedRemoveObj
{
    
    
    if (self.pageNum == 1  && array.count == 0) {
        [MBProgressHUD hideHUDForView:self.view animated:YES];
        [self hideHubWithOnlyText:@"该积分范围内暂时没有商品"];

        return;
    }
    if (isNeedRemoveObj) {
        [self.arrayIntegralGoodsList removeAllObjects];
    }
    for (NSInteger i = 0; i < array.count; i++) {
        NSDictionary *dicDetailsList = [NSDictionary dictionaryWithDictionary:array[i]];
        
        [self.arrayIntegralGoodsList addObject:[JGIntegralCommendGoodsModel objectWithKeyValues:dicDetailsList]];
    }
    [self.collectionView reloadData];
    
    
    //刷新数据后需要把footView和底部tableview高度重新设置一遍
    
//    self.viewTabelFoot.height = CGRectGetMaxY(self.viewFootCommend.frame) + 5;
    
    
    if (!self.tableView.tableFooterView) {
        self.viewTabelFootHeight = self.viewTabelFoot.height;
        self.tableViewContenSize = self.tableView.contentSize;
        
    }
    
    //collectionCell针对每个屏幕的大小比例
    CGFloat collectionScaleHeight = 320.0 / 224.0;
    //每个collectionCell的高度
    CGFloat collectionCellHeight = kScreenWidth / collectionScaleHeight;
    //计算出collctionView总共需要多高
    //出现小数点要向上取整
    CGFloat arrayCountFloat = self.arrayIntegralGoodsList.count / 2.0;
    NSInteger arrayCountInt = ceilf(arrayCountFloat);
    //因为collction item之间有间隔，所以计算宽度也要把这个算上
    CGFloat collctionCellScale = kScreenWidth/(320.0 / 4.0);
    CGFloat collctionSpace = (arrayCountInt - 1) * collctionCellScale;
    //算出collectionView的总高度
    self.collectionView.height = collectionCellHeight * arrayCountInt + collctionSpace;
    //原有footView的高度加上collectionView的高度
    self.viewTabelFoot.height = self.collectionView.height + self.viewTabelFootHeight;
    
    
    CGSize contentSize;
    contentSize.height = self.tableViewContenSize.height + self.viewTabelFoot.height - self.viewTabelFootHeight;
    self.tableView.contentSize = contentSize;
    
    self.tableView.tableFooterView = self.viewTabelFoot;

    
    [MBProgressHUD hideHUDForView:self.view animated:YES];
    [self.tableView headerEndRefreshing];
    [self.tableView footerEndRefreshing];
    
}

#pragma mrak --- JGIntergralScopeSelectViewDelegate
- (void)JGIntergralScopeDidSelectItemAtMinIntegral:(NSString *)minIntegral MaxIntegral:(NSString *)maxIntefral
{
    self.strMaxIntegral = maxIntefral;
    self.strMinIntegral = minIntegral;
    if (!minIntegral) {//如果最小范围是空，就是请求全部范围
        self.isFindAll = @1;
    }else{
        self.isFindAll = @0;
    }
    self.pageNum = 1;
    [MBProgressHUD showHUDAddedTo:self.view animated:YES];
    [self requestMyIntegralExchangeListWithPageNum:self.pageNum isNeedRemoveObj:YES];
}

#pragma mark ----Action
- (void)back {
    
    [self.navigationController popViewControllerAnimated:YES];
    
}

#pragma mark ------getter

- (UITableView *)tableView
{
    if (!_tableView) {
        _tableView = [[UITableView alloc]initWithFrame:CGRectMake(0, 0, kScreenWidth, kScreenHeight - 64)];
        _tableView.dataSource = self;
        _tableView.delegate = self;
        _tableView.backgroundColor = kGetColorWithAlpha(240, 240, 240, 1);
        CGFloat rowheightScala = 375.0 / 260.0;
        _tableView.rowHeight = kScreenWidth / rowheightScala;
    
        JGIntegralShopHeaderView *headerView = BoundNibView(@"JGIntegralShopHeaderView",JGIntegralShopHeaderView);
        _tableView.tableHeaderView = headerView;
//        _tableView.tableFooterView = self.viewTabelFoot;
//        JGLog(@"%f",[self loadTabelFootView].height);
//        CGSize contentSize = _tableView.contentSize;
//        contentSize.height = contentSize.height + [self loadTabelFootView].height;
//        _tableView.contentSize = contentSize;
        

//        添加上拉加载下拉刷新
        WEAK_SELF
        [_tableView addHeaderWithCallback:^{
            weak_self.pageNum = 1;
            [weak_self requestMyIntegralExchangeListWithPageNum:weak_self.pageNum isNeedRemoveObj:YES];
            
        }];
        [_tableView addFooterWithCallback:^{
            weak_self.pageNum++;
            [weak_self requestMyIntegralExchangeListWithPageNum:weak_self.pageNum isNeedRemoveObj:NO];
        }];
    }
    return _tableView;
}

- (UIView *)viewTabelFoot
{
    if (!_viewTabelFoot) {
        UIView *viewTableFoot = [[UIView alloc]init];
        
        CGFloat viewFootCommendScale = 320.0 / 216;
        JGNearCommendView *viewFootCommend = [[JGNearCommendView alloc]initWithFrame:CGRectMake(0, 5, kScreenWidth, kScreenWidth / viewFootCommendScale)];
        viewFootCommend.backgroundColor = [UIColor whiteColor];
        viewFootCommend.strLabelTitle = @"积分兑换";
        viewFootCommend.strImageName = @"Naer_Health_Eat";
        [viewTableFoot addSubview:viewFootCommend];
        
        
        CGFloat viewSelectY = CGRectGetMaxY(viewFootCommend.frame) + 5;
        CGFloat viewSelectScale = 320.0 / 90.0;
        JGIntergralScopeSelectView *viewSelect = [[JGIntergralScopeSelectView alloc]initWithFrame:CGRectMake(0, viewSelectY, kScreenWidth, kScreenWidth / viewSelectScale)];
        viewSelect.delegate = self;
        [viewTableFoot addSubview:viewSelect];
        
        CGFloat collectionViewY = CGRectGetMaxY(viewSelect.frame) + 5;
        self.collectionView.y = collectionViewY;
        [viewTableFoot addSubview:self.collectionView];
        
        viewTableFoot.frame = CGRectMake(0, 0, kScreenWidth, CGRectGetMaxY(viewSelect.frame) + 5);
        
        _viewTabelFoot = viewTableFoot;
    }

    return _viewTabelFoot;
}

- (NSMutableArray *)arrayIntegralGoodsList
{
    if (!_arrayIntegralGoodsList) {
        _arrayIntegralGoodsList = [NSMutableArray array];
    }
    return _arrayIntegralGoodsList;
}

static NSString *const ID = @"IntegralShopCell";
- (UICollectionView *)collectionView
{
    if (!_collectionView) {
        CGRect rect = CGRectMake(0, 0, kScreenWidth,kScreenHeight - 0);
        _collectionView = [[UICollectionView alloc] initWithFrame:rect collectionViewLayout:[[UICollectionViewFlowLayout alloc] init]];
        [_collectionView registerNib:[UINib nibWithNibName:@"IntegralShopCell" bundle:nil] forCellWithReuseIdentifier:ID];
        _collectionView.backgroundColor = kGetColor(240, 240, 240);
        _collectionView.dataSource = self;
        _collectionView.delegate = self;
        _collectionView.scrollEnabled = NO;
    }
    return _collectionView;
}




@end
